{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\chami\\\\Desktop\\\\Redux\\\\Project3-wip 11-16\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\chami\\\\Desktop\\\\Redux\\\\Project3-wip 11-16\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\chami\\\\Desktop\\\\Redux\\\\Project3-wip 11-16\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\chami\\\\Desktop\\\\Redux\\\\Project3-wip 11-16\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\chami\\\\Desktop\\\\Redux\\\\Project3-wip 11-16\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\chami\\\\Desktop\\\\Redux\\\\Project3-wip 11-16\\\\client\\\\src\\\\components\\\\Posts.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types'; // Connect comes with Provider\n\nimport { connect } from 'react-redux';\nimport { fetchPosts } from '../actions/postActions';\n\nvar Posts =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Posts, _Component);\n\n  function Posts() {\n    _classCallCheck(this, Posts);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Posts).apply(this, arguments));\n  }\n\n  _createClass(Posts, [{\n    key: \"componentWillMount\",\n    // Lifecycle Method\n    // Don't need the below because the post is going to come from redux\n    // the application state\n    // constructor (props) {\n    //     super(props);\n    //     this.state = {\n    //         posts: []\n    //     }\n    // }\n    value: function componentWillMount() {\n      // calls the action\n      this.props.fetchPosts();\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      // When it recieves a new property from the state this will run\n      if (nextProps.newPost) {\n        this.props.posts.unshift(nextProps.newPost);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var postItems = this.props.posts.map(function (post) {\n        return React.createElement(\"div\", {\n          key: post.id,\n          className: \"post-card\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 32\n          },\n          __self: this\n        }, React.createElement(\"h3\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 33\n          },\n          __self: this\n        }, post.title), React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 34\n          },\n          __self: this\n        }, post.body));\n      });\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      }, \"Date Ideas\"), postItems);\n    }\n  }]);\n\n  return Posts;\n}(Component);\n\nPosts.propTypes = {\n  fetchPosts: PropTypes.func.isRequired,\n  posts: PropTypes.array.isRequired,\n  newPost: PropTypes.object // Have to get the new items from the state\n\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    posts: state.posts.items,\n    newPost: state.posts.item\n  };\n};\n\nexport default connect(mapStateToProps, {\n  fetchPosts: fetchPosts\n})(Posts);","map":{"version":3,"sources":["C:\\Users\\chami\\Desktop\\Redux\\Project3-wip 11-16\\client\\src\\components\\Posts.js"],"names":["React","Component","PropTypes","connect","fetchPosts","Posts","props","nextProps","newPost","posts","unshift","postItems","map","post","id","title","body","propTypes","func","isRequired","array","object","mapStateToProps","state","items","item"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB,C,CACA;;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,UAAT,QAA2B,wBAA3B;;IAEMC,K;;;;;;;;;;;;;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;yCAEqB;AACjB;AACA,WAAKC,KAAL,CAAWF,UAAX;AACH;;;8CAEyBG,S,EAAW;AACjC;AACA,UAAGA,SAAS,CAACC,OAAb,EAAsB;AAClB,aAAKF,KAAL,CAAWG,KAAX,CAAiBC,OAAjB,CAAyBH,SAAS,CAACC,OAAnC;AACH;AACJ;;;6BAEQ;AACL,UAAMG,SAAS,GAAG,KAAKL,KAAL,CAAWG,KAAX,CAAiBG,GAAjB,CAAqB,UAAAC,IAAI;AAAA,eACvC;AAAK,UAAA,GAAG,EAAEA,IAAI,CAACC,EAAf;AAAmB,UAAA,SAAS,EAAC,WAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAKD,IAAI,CAACE,KAAV,CADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAIF,IAAI,CAACG,IAAT,CAFJ,CADuC;AAAA,OAAzB,CAAlB;AAMA,aACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADJ,EAEKL,SAFL,CADJ;AAMH;;;;EApCeV,S;;AAuCpBI,KAAK,CAACY,SAAN,GAAkB;AACdb,EAAAA,UAAU,EAAEF,SAAS,CAACgB,IAAV,CAAeC,UADb;AAEdV,EAAAA,KAAK,EAAEP,SAAS,CAACkB,KAAV,CAAgBD,UAFT;AAGdX,EAAAA,OAAO,EAAEN,SAAS,CAACmB,MAHL,CAMlB;;AANkB,CAAlB;;AAOA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAAAC,KAAK;AAAA,SAAK;AAC9Bd,IAAAA,KAAK,EAAEc,KAAK,CAACd,KAAN,CAAYe,KADW;AAE9BhB,IAAAA,OAAO,EAAEe,KAAK,CAACd,KAAN,CAAYgB;AAFS,GAAL;AAAA,CAA7B;;AAKA,eAAetB,OAAO,CAACmB,eAAD,EAAkB;AAAElB,EAAAA,UAAU,EAAVA;AAAF,CAAlB,CAAP,CAAyCC,KAAzC,CAAf","sourcesContent":["import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\n// Connect comes with Provider\r\nimport { connect } from 'react-redux';\r\nimport { fetchPosts } from '../actions/postActions'\r\n\r\nclass Posts extends Component {\r\n    // Lifecycle Method\r\n    // Don't need the below because the post is going to come from redux\r\n    // the application state\r\n    // constructor (props) {\r\n    //     super(props);\r\n    //     this.state = {\r\n    //         posts: []\r\n    //     }\r\n    // }\r\n    \r\n    componentWillMount() {\r\n        // calls the action\r\n        this.props.fetchPosts();\r\n    }  \r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        // When it recieves a new property from the state this will run\r\n        if(nextProps.newPost) {\r\n            this.props.posts.unshift(nextProps.newPost);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const postItems = this.props.posts.map(post => (\r\n            <div key={post.id} className=\"post-card\">\r\n                <h3>{post.title}</h3>\r\n                <p>{post.body}</p>\r\n            </div>\r\n        ));\r\n        return (\r\n            <div>\r\n                <h1>Date Ideas</h1>\r\n                {postItems}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nPosts.propTypes = {\r\n    fetchPosts: PropTypes.func.isRequired,\r\n    posts: PropTypes.array.isRequired,\r\n    newPost: PropTypes.object\r\n}\r\n\r\n// Have to get the new items from the state\r\nconst mapStateToProps = state => ({\r\n    posts: state.posts.items,\r\n    newPost: state.posts.item\r\n});\r\n\r\nexport default connect(mapStateToProps, { fetchPosts })(Posts);"]},"metadata":{},"sourceType":"module"}