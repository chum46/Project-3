{"ast":null,"code":"import { FETCH_POSTS, NEW_POST, FETCH_EVENTS, FETCH_ACTIVITIES, FETCH_RESTAURANTS } from './types';\nimport axios from 'axios'; // The thunk middleware allows us to call the dispatch function directly\n// so that we can make asynchronous requests\n\nexport var fetchPosts = function fetchPosts() {\n  return function (dispatch) {\n    // console.log('fetching');\n    // Think of dispatch as a resolver or a promise\n    // Whenever we want to send the data we call it dispatch\n    fetch('https://jsonplaceholder.typicode.com/posts').then(function (res) {\n      return res.json();\n    }) // .then(data => this.setState({posts: data}));\n    .then(function (posts) {\n      return dispatch({\n        type: FETCH_POSTS,\n        // Whatever data is coming in with the type we can call \n        // payload or whatever we want\n        payload: posts\n      });\n    });\n  };\n};\nexport var fetchAcivities = function fetchAcivities() {\n  return function (dispatch) {\n    fetch('https://jsonplaceholder.typicode.com/posts').then(function (res) {\n      return res.json();\n    }).then(function (activities) {\n      return dispatch({\n        type: FETCH_ACTIVITIES,\n        payload: activities\n      });\n    });\n  };\n};\nexport var createPost = function createPost(postData) {\n  return function (dispatch) {\n    console.log('action called');\n    fetch('https://jsonplaceholder.typicode.com/posts', {\n      method: 'POST',\n      headers: {\n        'content-type': 'application/json'\n      },\n      body: JSON.stringify(postData)\n    }) // Tell it we want json data\n    .then(function (res) {\n      res.json();\n      console.log(\"testing\");\n    }) // Make sure we can make a post and get the data back\n    .then(function (post) {\n      return dispatch({\n        type: NEW_POST,\n        payload: post\n      });\n    });\n  };\n};\nexport var findEvents = function findEvents(startDate, endDate, type, minPrice, maxPrice) {\n  return function (dispatch) {\n    console.log('findEvents action called');\n    console.log(startDate + \" \" + endDate);\n    var ticketmasterAPI = '';\n    return axios.get(\"https://app.ticketmaster.com/discovery/v2/events.json?city=Chicago&apikey=\".concat(ticketmasterAPI, \"&startDateTime=\").concat(startDate, \"T05:30:00Z&endDateTime=\").concat(endDate, \"T04:30:00Z&size=100\")).then(function (response) {\n      return dispatch({\n        type: FETCH_EVENTS,\n        payload: response.data._embedded.events\n      });\n    });\n  };\n};\nexport var findFood = function findFood(startDate, endDate, cuisinesAPI, minPrice, maxPrice) {\n  return function (dispatch) {\n    // console.log('findEvents action called');\n    // console.log(startDate + \" \" + endDate);\n    var zomatoAPI = '';\n    console.log(cuisinesAPI);\n    return axios.get(\"https://developers.zomato.com/api/v2.1/search?entity_id=292&entity_type=city&cuisines=\".concat(cuisinesAPI), {\n      headers: {\n        \"user-key\": zomatoAPI\n      }\n    }).then(function (response) {\n      return dispatch({\n        // const zomatoArray = response.data.restaurants;\n        type: FETCH_RESTAURANTS,\n        payload: response.data.restaurants\n      });\n    });\n  };\n}; // export const loadEvents = (ticketmasterArray) => dispatch => {\n//     return \n// }","map":{"version":3,"sources":["C:\\Users\\chami\\Desktop\\Redux\\Project3-wip 11-16\\client\\src\\actions\\postActions.js"],"names":["FETCH_POSTS","NEW_POST","FETCH_EVENTS","FETCH_ACTIVITIES","FETCH_RESTAURANTS","axios","fetchPosts","dispatch","fetch","then","res","json","posts","type","payload","fetchAcivities","activities","createPost","postData","console","log","method","headers","body","JSON","stringify","post","findEvents","startDate","endDate","minPrice","maxPrice","ticketmasterAPI","get","response","data","_embedded","events","findFood","cuisinesAPI","zomatoAPI","restaurants"],"mappings":"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","sourcesContent":["import { FETCH_POSTS, NEW_POST, FETCH_EVENTS, FETCH_ACTIVITIES, FETCH_RESTAURANTS } from './types';\r\nimport axios from 'axios';\r\n\r\n// The thunk middleware allows us to call the dispatch function directly\r\n// so that we can make asynchronous requests\r\n\r\n\r\nexport const fetchPosts = () => dispatch => {\r\n    // console.log('fetching');\r\n    // Think of dispatch as a resolver or a promise\r\n    // Whenever we want to send the data we call it dispatch\r\n    fetch('https://jsonplaceholder.typicode.com/posts')\r\n        .then(res => res.json())\r\n        // .then(data => this.setState({posts: data}));\r\n        .then(posts =>\r\n            dispatch({\r\n                type: FETCH_POSTS,\r\n                // Whatever data is coming in with the type we can call \r\n                // payload or whatever we want\r\n                payload: posts\r\n            })\r\n        );\r\n\r\n};\r\n\r\nexport const fetchAcivities = () => dispatch => {\r\n    \r\n    fetch('https://jsonplaceholder.typicode.com/posts')\r\n        .then(res => res.json())\r\n        .then(activities =>\r\n            dispatch({\r\n                type: FETCH_ACTIVITIES,\r\n                payload: activities\r\n            })\r\n        );\r\n\r\n};\r\n\r\nexport const createPost = (postData) => dispatch => {\r\n    console.log('action called');\r\n    fetch('https://jsonplaceholder.typicode.com/posts', {\r\n        method: 'POST',\r\n        headers: {\r\n            'content-type': 'application/json'\r\n        },\r\n        body: JSON.stringify(postData)\r\n    })\r\n        // Tell it we want json data\r\n        .then(res => {\r\n            res.json()\r\n            console.log(\"testing\")\r\n        })\r\n\r\n        // Make sure we can make a post and get the data back\r\n        .then(post => dispatch({\r\n            type: NEW_POST,\r\n            payload: post\r\n        }));\r\n};\r\n\r\nexport const findEvents = (startDate, endDate, type, minPrice, maxPrice) => dispatch => {\r\n    console.log('findEvents action called');\r\n    console.log(startDate + \" \" + endDate);\r\n    const ticketmasterAPI = '';\r\n    return axios.get(`https://app.ticketmaster.com/discovery/v2/events.json?city=Chicago&apikey=${ticketmasterAPI}&startDateTime=${startDate}T05:30:00Z&endDateTime=${endDate}T04:30:00Z&size=100`)\r\n        .then(response => dispatch({\r\n            type: FETCH_EVENTS,\r\n            payload: response.data._embedded.events\r\n        }))\r\n};\r\n\r\nexport const findFood = (startDate, endDate, cuisinesAPI, minPrice, maxPrice) => dispatch => {\r\n    // console.log('findEvents action called');\r\n    // console.log(startDate + \" \" + endDate);\r\n    const zomatoAPI = '';\r\n    console.log(cuisinesAPI);\r\n    return axios.get(`https://developers.zomato.com/api/v2.1/search?entity_id=292&entity_type=city&cuisines=${cuisinesAPI}`, {\r\n        headers: {\r\n            \"user-key\": zomatoAPI\r\n        }\r\n    }).then(response => dispatch({\r\n        // const zomatoArray = response.data.restaurants;\r\n        type: FETCH_RESTAURANTS,\r\n        payload: response.data.restaurants\r\n    }))\r\n};\r\n// export const loadEvents = (ticketmasterArray) => dispatch => {\r\n//     return \r\n\r\n// }\r\n"]},"metadata":{},"sourceType":"module"}